#= require jquery/dist/jquery.min
#= require es5-shim.min
#= require underscore/underscore-min
#= require angular/angular.min
#= require angular-resource/angular-resource
#= require angular-ui-router/release/angular-ui-router
#= require angular-cookies/angular-cookies
#= require angular-rails-templates
#= require_tree ../templates


building = angular.module "building", ['ngResource', 'ui.router', 'templates', 'ngCookies' ]

<%- if Rails.env.production? %>
building.constant('ApiUrl', 'http://localhost:3000')
<%- end %>

<%- if Rails.env.development? %>
building.constant('ApiUrl', 'http://localhost:3000')
<%- end %>

building.config ['$httpProvider', ($httpProvider) ->
  $httpProvider.defaults.headers.common['Content-Type'] = 'application/json'
  $httpProvider.defaults.headers.common['X-CSRF-Token'] = $('meta[name=csrf-token]').attr('content')
]

building.config ['$stateProvider', '$urlRouterProvider', ($stateProvider, $urlRouterProvider) ->
  $urlRouterProvider.otherwise '/local'
  $stateProvider.state 'attributes',
    url: "/attributes"
    controller: 'Attributes'
    templateUrl: 'plugin/attributes.html'

  $stateProvider.state 'local',
    url: "/local"
    controller: 'Local'
    templateUrl: 'plugin/local.html'

  $stateProvider.state 'system',
    url: "/system"
    controller: 'System'
    templateUrl: 'plugin/system.html'

  $stateProvider.state 'remote',
    url: "/remote"
    controller: 'Remote'
    templateUrl: 'plugin/remote.html'

  $stateProvider.state 'login',
    url: "/login"
    controller: 'Login'
    templateUrl: 'plugin/login.html'

  $stateProvider.state 'register',
    url: "/register"
    controller: 'Register'
    templateUrl: 'plugin/register.html'
]

building.directive 'su-number-format', ['$filter', ($filter) ->
  require: 'ngModel'
  link: (scope, elm, attrs, ctrl) ->
    formatter = (value) ->
      parseFloat(value).toFixed(2)
    parser = () ->
      ctrl.$modelValue
    ctrl.$formatters.push formatter
    ctrl.$parser.push parse
]

building.factory "Entity", ['$resource', ($resource, ApiUrl) ->
  $resource("/api/entities/:id", {id: '@id'}, {
    index:
      method: 'GET'
      isArray: true
      url: ApiUrl + "/api/entities"
    mine:
      url: ApiUrl + "/api/entities/mine"
      method: 'GET'
      isArray: true
    remove_enetity:
      url: ApiUrl + "/api/entities/:uuid"
      method: 'DELETE'
  })
]

building.service 'CurrentUser', ['$q','$timeout', ($q, $timeout) ->
  this.password = null
  this.mobile = null
  this.auth_token = null
  self = this
  this.is_login = ()->
    return self.auth_token != null


  login = (scope)->
    scope.defered = $q.defer()
    scope.reject = (data)->
      scope.defered.reject(JSON.parse(data))
    scope.resolve = (data)->
      scope.defered.resolve(JSON.parse(data))

    timeoutFun = ->
      if scope.current_user.http_message != null
        scope.defered.reject({message: scope.current_user.http_message})

    scope.bridge 'login', this.mobile + "|" + this.password
    $timeout timeoutFun, 5000

    scope.defered.promise

   this.login = login

   this
  ]

building.controller "Attributes", ['$scope', 'CurrentUser', '$cookies', ($scope, CurrentUser, $cookies) ->
  $scope.attributes_display = ()->
    keys_need_turn_into_cm = ["lenx", "leny", "lenz"]
    inches_to_cm_transformer = (inches) ->
      Math.round(inches * 2.54)

    cm_to_inches_transformer = (cm) ->
      Math.round(cm / 2.54)

    $scope.displayable_attributes = []
    displayable_attr_keys = _.intersection (k.toLowerCase() for k of $scope.current_entity.dynamic_attributes),  (k.toLowerCase() for k of attributes_config)
    $scope.change = (k, v)->
      v = if keys_need_turn_into_cm.indexOf(k) >= 0 then cm_to_inches_transformer(v) else v
      $scope.bridge 'update_attribute', k + ":" + v

    for k in displayable_attr_keys
      value  = if angular.isNumber($scope.current_entity.dynamic_attributes[k]) then $scope.current_entity.dynamic_attributes[k].toFixed(2) else $scope.current_entity.dynamic_attributes[k]
      value = if keys_need_turn_into_cm.indexOf(k) >= 0 then inches_to_cm_transformer(value) else value
      $scope.displayable_attributes.push(
        key: k,
        value: value,
        display: attributes_config[k]["display"],
        type: attributes_config[k]["type"],
        editable: attributes_config[k]["editable"],
        options:
          attributes_config[k]["options"]
      )
  $scope.attributes_display()
]

building.controller "Local", ['$scope', 'CurrentUser', '$cookies', ($scope, CurrentUser, $cookies) ->
  $scope.replace_by_name = (name)->
    $scope.bridge "replace_by_name", name

  $scope.c = ->
    $cookies.getAll()

  $scope.upload_local_model = (model) ->
    $scope.bridge "upload_local_model", model + "||" + CurrentUser.auth_token
]

building.controller "Remote", ['CurrentUser', '$scope', '$http', '$interval', "Entity", (CurrentUser, $scope, $http, $interval, Entity) ->
  $scope.current_entity = {}
  $scope.remote_models = {}

  $scope.delete_remote = (model_name, uuid) ->
    if confirm("永久删除模型" + model_name + "么?" + uuid)
      Entity.remove_enetity {uuid: uuid}, (data) ->
        $scope.remote_models = data

  if CurrentUser.is_login()
    Entity.mine (data) ->
      $scope.remote_models = data
]

building.controller "Login", ['$scope', 'CurrentUser', ($scope, CurrentUser) ->
  $scope.current_user = {}
  $scope.login = () ->
    $scope.current_user.http_message = null
    if !$scope.current_user.mobile or !$scope.current_user.mobile.match(/^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\d{8})$/)
      alert "手机号码格式不正确"
      return
    if !$scope.current_user.password
      alert "密码不正确"
      return

    loginSuccess = (data)->
      CurrentUser.auth_token = data.auth_token
      window.location.hash = '/local'

    loginFail = (data)->
      alert data.http_message

    CurrentUser.mobile = $scope.current_user.mobile
    CurrentUser.password = $scope.current_user.password
    CurrentUser.login($scope).then(loginSuccess, loginFail)
]

building.controller "Register", ['$scope', '$http', 'ApiUrl', ($scope, $http, ApiUrl) ->
  $scope.current_user = {}
  $scope.register = ()->
    if !$scope.current_user.mobile or !$scope.current_user.mobile.match(/^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\d{8})$/)
      alert "手机号码格式不正确"
      return
    if !$scope.current_user.password
      alert "密码不正确"
      return
    if $scope.current_user.password != $scope.current_user.password_confirmation
      alert "两次密码不一致"
      return

    $http.post(ApiUrl + "/api/users", {user: $scope.current_user}).success (response, status, headers) ->
      if response.status == "fail"
        alert response.message
      else
        window.location.hash = "/local"

]

building.controller "System", ['$scope', '$http', '$interval', "Entity", ($scope, $http, $interval, Entity) ->
  $scope.current_entity = {}
  $scope.system_models = {}
  $scope.current_user = {}
  Entity.index (data) ->
    alert data
    $scope.system_models = data

]

building.controller "Main", ['$scope', '$http', '$timeout', "Entity", "CurrentUser", ($scope, $http, $timeout, Entity, CurrentUser) ->
  $scope.current_user = CurrentUser
  $scope.is_login = CurrentUser.is_login
  $scope.current_entity = {}
  $scope.local_models = []

  $scope.$watch 'current_entity', (oldV, newV) ->
    $scope.goto_page "attributes"


  $scope.readable_name = (code)->
    return "Edge" if code == "Edge"
    return "" if code == "" or code == undefined
    code = code.split("")
    f = code[0]
    s = code[1]
    n = code[4..8].join("")
    try
      name = name_config[f][s] + n if name_config[f][s]
      return name
    catch error
      return code
    return code


  $scope.goto_page = (page) ->
    window.location.hash = page

  $scope.bridge = (action, param) ->
    window.location.href = "skp:" + action + "@" + param

  $scope.current_component_definition_name_change = () ->
    $scope.bridge "current_component_definition_name_change", $scope.current_entity.name

  $scope.remove_local_model = (model_name) ->
    if confirm("永久删除模型" + model_name + "么?")
      $scope.bridge "remove_local_component_definition", model_name

  $scope.download_from_system = (skp_file) ->
    $scope.bridge "download_from_system", skp_file
    window.location.hash = "/local"

  $scope.download_from_remote = (skp_file) ->
    $scope.bridge "download_from_remote", skp_file
    window.location.hash = "/local"

  $scope.replace_by_name = (model_name) ->
    $scope.bridge "replace_by_name", model_name

  $scope.sign_out = ->
    $http.delete("/api/users/sign_out").success (response) ->
      window.location.hash = "/login"

  $timeout ()->
    $scope.bridge 'initialization'
    , 200
]

